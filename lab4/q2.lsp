(print "Lab 4: task 2")

(defun diff_lam (lst)
((lambda (f r rr)
    (cond 
        ((null lst) lst)
        ((and (atom f) (not (eq f '+)) (not (eq f '-)) (not (eq f '*)) (not (eq f '/)))
            (cond 
                ((eq 'x f) 1)
                (0)
            )
        )
        ((not (atom f))
            (diff_lam f)
        )
        ((eq f '+)
            (list '+ (diff_lam r) (diff_lam rr))
        )
        ((eq f '-)
            (list '- (diff_lam r) (diff_lam rr))
        )
        ((eq f '*)  
            (list '+    (list '* (diff_lam r) (nth 2 lst)) 
                        (list '*  (nth 1 lst) (diff_lam rr))
            )
        )
        ((eq f '/) 
            (list '/ (list '-   (list '* (diff_lam r) (nth 2 lst)) 
                                (list '* (nth 1 lst) (diff_lam rr))) 
                                (list '* (nth 2 lst) (nth 2 lst))
            )
        )
    )
    )
    (car lst) (cdr lst) (cdr (cdr lst))
))

(defun diff_let (lst)
(let ((f (car lst)) (r (cdr lst)) (rr (cdr(cdr lst))))
    (cond
        ((null lst) lst)
        ((and (atom f) (not (eq f '+)) (not (eq f '-)) (not (eq f '*)) (not (eq f '/))) 
            (cond
                ((eq 'x f) 1)
                (0)
            )
        )
        ((not (atom f)) 
            (diff_let f)
        )
        ((eq f '+)
            (list '+  (diff_let r) (diff_let rr))
        )
        ((eq f '-) 
            (list '-  (diff_let r) (diff_let rr))
        )
        ((eq f '*)  
            (list '+    (list '* (diff_let r) (nth 2 lst)) 
                        (list '*  (nth 1 lst) (diff_let rr))
            )
        )
        ((eq f '/) 
            (list '/ (list '-   (list '* (diff_let r) (nth 2 lst)) 
                                (list '* (nth 1 lst) (diff_let rr))) 
                                (list '* (nth 2 lst) (nth 2 lst))
            )
        )   
    )
))

(print (diff_lam '(- x (/ (* x x) (* x x x)))))
(print (diff_let '(- x (/ (* x x) (* x x x)))))
